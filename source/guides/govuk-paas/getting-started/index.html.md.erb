---
title: Getting started
last_reviewed_on: 2021-05-17
review_in: 3 months
---

# <%= current_page.data.title %>

## Exploring GOV.UK PaaS
If you are interested in adopting this platform and would like to explore it, request a new user. By default you will be given access to
the _sandbox_ space where you can deploy anything on a temporary basis. Please be mindful that creating resources is not free so you should delete them as soon
as possible.

Requests are raised via [the service portal](https://dfe.service-now.com.mcas.ms/serviceportal/?id=sc_cat_item&sys_id=0659b8c81bc7a0502fe864606e4bcb63&sysparm_category=19d07bc3dbff17003b929334ca9619bd).
An `@education.gov.uk` account is required, as well as [access to the service portal](https://dfe.service-now.com.mcas.ms/serviceportal/?id=sc_cat_item&sys_id=09927632dbe6d0509402e1aa4b9619b5)
for BYOD users.

If you can't access the service portal, someone who has access can raise the request for you.

Finally, you can ask in the `#govuk-paas` Slack channel or via email to [infrastructure operations](mailto:infrastructure.operations@education.gov.uk).

## Push my first app
Once you have an account on GOV.UK PaaS, you can follow this video for a quick walkthrough covering the basics:

* Where is the documentation
* Command line
* Login
* Push a simple application
* Read the logs

<iframe width="560" height="315" src="https://www.youtube.com/embed/i7kBe5S8jdQ" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

## Onboarding a service
If you are planning to use GOV.UK PaaS in production, you will need one or more spaces (See [Organisations and spaces](/guides/govuk-paas/overview/#organisations-and-spaces)),
dedicated to your service.
Finance must be agreed as you will be responsible for the bills. The required details are shown on the service portal form.

## Adding a user to the platform
Any DfE user with an _@education.gov.uk_ or _@digital.education.gov.uk_ address can have an account on the platform. By default they will have access
to the sandbox space only. Access to particular spaces can also be requested, but it is preferably provided by the existing space managers.

Here are the space roles available:

* *SpaceManager*, only for managers, senior developers, tech leads or devops engineers
* *SpaceDeveloper* for developers. Only for non-production spaces.
* *SpaceAuditor* for readonly access

And one organisation level role:

* *BillingManager* to access billing data and current spending

## Temporary privileged access
To allow rapid response to incidents, privilege escalation is done by the space managers. It is currently a manual process and they are responsible to
revoke the privilege when it is not needed anymore. It is possible to
[run a script](https://github.com/DFE-Digital/bat-infrastructure/blob/main/scripts/check-users-in-space-developer-role.ps1) regularly to confirm we
only see the expected space users.

## Support

For technical issues or guidance, the community of DfE users can help you. Reach out on #govuk-paas channel in the DfE Slack.

The team at GDS can be reached on [cross-government slack](https://ukgovernmentdigital.slack.com/) in the #govuk-paas channel during office hours.
They always have one dedicated engineer on support who will answer queries.

The platform is [supported 24x7](https://www.cloud.service.gov.uk/#supported-24-hours-a-day-7-days-a-week) by the GOV.UK PaaS team and they can be
reached using the form linked or via email. Support requests are tracked via Zendesk tickets.

In case of suspected outage, always check [the status page](https://status.cloud.service.gov.uk/). It is highly recommended to subscribe to the
mailing list (linked on the status page) to learn about potential disruptions.

## Tooling

### cf cli

The default tool to deploy to GOV.UK PaaS is the [cf command line tool](https://docs.cloud.service.gov.uk/get_started.html#set-up-the-cloud-foundry-command-line).
It is easy to use and any developer can use it to push applications and create services like postgres or redis.

When deploying with the cli, we recommend using [manifests](https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html):

* It avoids passing multiple options on the command line
* Manifests can be stored in the git repository
* Secrets or variables can be passed at deploy time

### Terraform
The Cloud Foundry provider for Terraform allows describing the deployment in a declarative way. It is the recommended way for robust deployments and
continuous delivery pipelines.

#### Why

* The declarative syntax avoids having to think about dependencies. Terraform will create the resources in the right order and destroy them in the
right order when required. It also makes it idempotent so Terraform won’t recreate a resource already created.
* This is particularly useful to create disposable environments for testing or review apps, and delete them when they are not required anymore.
* The syntax is elegant, powerful and modular
* It can read data from environment variables, AWS parameter store, Azure keyvault, yaml files, json files, etc.
* It can create an environment made of very different technologies. For example, we create an environment with Azure, GOV.UK PaaS and Statuscake in a single Terraform run.

#### Caution

* Terraform requires to store its state in a persistent storage. An IaaS solution may be used alongside GOV.UK PaaS, like an Azure Storage Account or
AWS S3 bucket. GOV.UK PaaS also provides an [Amazon S3 service](https://docs.cloud.service.gov.uk/deploying_services/s3/).
* All the resources are under Terraform control, including databases. It is a good practice to back up critical databases externally as an additional
protection. Terraform [prevent_destroy lifecycle](https://www.terraform.io/docs/language/meta-arguments/lifecycle.html#prevent_destroy) may help as well.

#### Cloud Foundry provider
The Cloud Foundry community maintains the [Cloud Foundry Terraform provider](https://registry.terraform.io/providers/cloudfoundry-community/cloudfoundry/latest/docs).

It can be easily downloaded and installed on Terraform 0.13 and above with:

```hcl
terraform {
  required_providers {
    cloudfoundry = {
      source = "cloudfoundry-community/cloudfoundry"
      version = "~> 0.14"
    }
  }
}
```

#### Zero downtime

By default when an application is pushed to GOV.UK PaaS, the live version is deleted, the new version is built, then the new version becomes live.
This can create a few minutes downtime.

To avoid this issue, the provider offers an elegant [blue-green](https://registry.terraform.io/providers/cloudfoundry-community/cloudfoundry/latest/docs/resources/app#application-deployment-strategy-blue-green-deploy)
deployment strategy. It builds the new version alongside the live one, and it switches traffic to it smoothly when it’s up and running.

### Docker

The default option to deploy an application to GOV.UK PaaS is using buildpacks. They are preconfigured environments for a variety of programming
languages. The developer pushes their code using `cf push` and Cloud Foundry will build it remotely using the relevant buildpack. This is **not** the
DfE recommended way to deploy to GOV.UK PaaS, except for very simple applications like static websites.

Another solution is to use Docker. Using `cf push --docker-image my-app` tells Cloud Foundry to:

* Pull the my-app image from a docker registry (Docker Hub by default)
* Unpack the files
* Run the application in Cloud Foundry container environment

This approach has several advantages:

* Avoid vendor lock-in: Docker is commonly used in other platform like Kubernetes, Azure app service, Azure container instances, AWS ECS, etc. Should
we want to move away from GOV.UK PaaS, it’s possible.
* Build only once: The Docker image is a build artifact identified by a specific tag (usually the commit id). It can be deployed consistently across
different environments.
* Faster deployments: The deployment to each environment only takes a few seconds as the image is already built.
* Faster build: Docker build cache can be leveraged to reduce built time massively.

The Terraform Cloud Foundry provider also supports Docker.

**Important:** If you use Docker Hub as Docker registry, make sure to set up authentication as unauthenticated pulls are significantly
[rate limited](https://docs.docker.com/docker-hub/download-rate-limit/).

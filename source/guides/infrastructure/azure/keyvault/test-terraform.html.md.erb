---
title: Test using Terraform
weight: 10
last_reviewed_on: 2021-11-30
review_in: 1 year
hide_in_navigation: true
summary:  
---

#  <%= current_page.data.title %>

Assuming you are using the SXXX Project and in the d01 Development subscription then this test example should work.

```
variable "AZURE_CLIENT_ID" {
   default = ""
}

variable "AZURE_CLIENT_SECRET" {
   default = ""
}

variable "AZURE_TENANT_ID" {
   default = ""
}

variable "AZURE_SUBSCRIPTION_ID" {
    default = ""
}

provider "azurerm" {
  version         = ">= 2.0"
  skip_provider_registration = true
  features {}
  client_id     = var.AZURE_CLIENT_ID
  client_secret = var.AZURE_CLIENT_SECRET
  tenant_id     = var.AZURE_TENANT_ID
  subscription_id = var.AZURE_SUBSCRIPTION_ID
}

terraform {
  required_version = ">= 0.13.4"
}

data "azurerm_key_vault" "vault" {
  name                = "sXXXd01-kv"
  resource_group_name = "sXXXd01-rg"
}


data "azurerm_key_vault_secret" "Application" {
    key_vault_id = data.azurerm_key_vault.vault.id
    name = "TTA-KEYS"
}

output "Secret" {
    value = data.azurerm_key_vault_secret.Application
}

output "RAILS_MASTER_KEY" {
    value = jsondecode( data.azurerm_key_vault_secret.Application.value )["RAILS_MASTER_KEY"]
}
```

The Client_id is found by navigating to the portal ‘Enterprise Applications’ and recovering the Application ID

The Application Secret, should be stored in your vault by the CIP team.

The Subscription Id is recovered from the Subscriptions page, and the Tenant Id is recovered from the Active Directory page.

Once you have all four bits of information you can export them as variables and check you can recover your secret using terraform.

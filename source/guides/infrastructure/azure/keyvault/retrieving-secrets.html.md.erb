---
title: Retrieving Secrets in GitHub Actions
weight: 10
last_reviewed_on: 2021-11-30
review_in: 1 year
hide_in_navigation: true
summary:  
---

#  <%= current_page.data.title %>

Some Secrets are required by the GitHub action process, so we will need to extract them from Azure. The simplest method is to use the actions provided. Azure Actions


## Define you Credentials
You will need to create a secret with a name like AZURE_CREDENTIALS in GitHub secrets, with the following format:

```
  {
    "clientId":       "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxxx",
    "clientSecret":   "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    "subscriptionId": "xxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxxxx",
    "tenantId":       "xxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxxxx"
  }

```

The values are related to a service principal in Azure.

* clientId: Application (client) ID of the App registration (From App registration overview)

* clientSecret: Client secret created for this App registration. The value should be stored in key vault

* subscriptionId: ID of the subscription (From Subscriptions)

* tenantId: Directory (tenant) ID of the App registration (From App registration overview)

## Action

```
      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1
        id:   azSecret
        with:
           keyvault: "MyKeyVault"
           secrets: 'CONTENT-KEYS'
```

## Use

```
      - name: Use Secrets
        run: |
            Some functions
        env:
          HTTPAUTH_PASSWORD: ${{ fromJson( steps.azSecret.outputs.CONTENT-KEYS).HTTP_PASSWORD }}
          HTTPAUTH_USERNAME: ${{ fromJson( steps.azSecret.outputs.CONTENT-KEYS).HTTP_USERNAME }}
```

## NOTE
When I used the secrets in this format , to pass to terraform:

```
      - name: Terraform ( ${{github.event.inputs.environment}} )
        run: |
            cd terraform/paas && pwd
            terraform init -backend-config=${{steps.variables.outputs.control}}.bk.vars -backend-config="key=${{steps.variables.outputs.key}}.tfstate"
            terraform plan -var-file=${{steps.variables.outputs.control}}.env.tfvars -out plan
            terraform apply -auto-approve plan
        env:
          ARM_ACCESS_KEY:      ${{ secrets.ARM_ACCESS_KEY  }}
          ARM_CLIENT_ID:       ${{fromJson( secrets.AZURE_CREDENTIALS).clientId}}
          ARM_CLIENT_SECRET:   ${{fromJson( secrets.AZURE_CREDENTIALS).clientSecret}}
          ARM_TENANT_ID:       ${{fromJson( secrets.AZURE_CREDENTIALS).tenantId}}
          ARM_SUBSCRIPTION_ID: ${{fromJson( secrets.AZURE_CREDENTIALS).subscriptionId}}
```

I noticed some of the variables were visible in the logs, the [add-mask](https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#masking-a-value-in-log) command is next to useless as it displays the secret when it adds the mask [BUG](https://github.com/actions/runner/issues/475)

A more simple and secure way would be to pass the credentials as a map:

```
      - name: Terraform ( ${{github.event.inputs.environment}} )
        run: |
            cd terraform/paas && pwd
            terraform init -backend-config=${{steps.variables.outputs.control}}.bk.vars -backend-config="key=${{steps.variables.outputs.key}}.tfstate"
            terraform plan -var-file=${{steps.variables.outputs.control}}.env.tfvars -out plan
            terraform apply -auto-approve plan
        env:
          ARM_ACCESS_KEY:             ${{ secrets.ARM_ACCESS_KEY  }}
          TF_VAR_AZURE_CREDENTIALS:   ${{ secrets.AZURE_CREDENTIALS }}
```
then in your terraform use:

```
variable AZURE_CREDENTIALS {}

locals {
  azure_credentials      = jsondecode( var.AZURE_CREDENTIALS )
}

provider "azurerm" {
  version                    = ">= 2.0"
  skip_provider_registration = true
  features {}
  subscription_id = local.azure_credentials.subscriptionId
  client_id       = local.azure_credentials.clientId
  client_secret   = local.azure_credentials.clientSecret
  tenant_id       = local.azure_credentials.tenantId
}
```
